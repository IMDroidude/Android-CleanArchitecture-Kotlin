apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'


ext {
  //Android libraries
  appCompat_version = '27.1.0'
  constraintLayout_version = '1.0.2'
  archComponents_version = '1.1.1'
  glide_version = '4.0.0'

  //Third party libraries
  kotlin_coroutines_version = '0.22.1'
  dagger_version = '2.11'
  javaxAnnotations_version = '1.0'
  javaxInject_version = '1'
  retrofit_version = '2.3.0'
  okhttp_logging_interceptor_version = '3.8.1'
  room_architecture = '1.1.1'

  //Unit Testing
  robolectric_version = '3.8'
  junit_version = '4.12'
  mockito_version = '1.4.0'
  kluent_version = '1.14'

  //Acceptance Testing
  runner_version = '1.0.2-alpha1'
  espresso_version = '3.0.2-alpha1'

  //Development
  leakCanaryVersion = '1.5'

  mainApplication = [
          //kotlin:                     "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
          kotlin:                     "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
          kotlinCoroutines:           "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version",
          kotlinCoroutinesAndroid:    "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version",
          appCompat: 'androidx.appcompat:appcompat:1.0.0',
          cardView: 'androidx.cardview:cardview:1.0.0',
          recyclerView: 'androidx.recyclerview:recyclerview:1.0.0',
          design: 'com.google.android.material:material:1.0.0',
          constraintLayout: 'androidx.constraintlayout:constraintlayout:1.1.3',
          androidAnnotations: 'androidx.annotation:annotation:1.0.0',
          archComponents: 'androidx.lifecycle:lifecycle-extensions:2.0.0',
          archComponentsCompiler: 'androidx.lifecycle:lifecycle-compiler:2.0.0',
          glide:                      "com.github.bumptech.glide:glide:$glide_version",
          daggerCompiler:             "com.google.dagger:dagger-compiler:$dagger_version",
          dagger:                     "com.google.dagger:dagger:$dagger_version",
          javaxAnnotation:            "javax.annotation:jsr250-api:$javaxAnnotations_version",
          javaxInject:                "javax.inject:javax.inject:$javaxInject_version",
          retrofit:                   "com.squareup.retrofit2:converter-gson:$retrofit_version",
          okhttpLoggingInterceptor:   "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_interceptor_version",

          roomRuntime : 'androidx.room:room-runtime:2.0.0',
          roomAnnotationProcessor: 'androidx.room:room-compiler:2.0.0'
  ]

  unitTesting = [
          kotlin:             "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
          kotlinTest:         "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version",
          robolectric:        "org.robolectric:robolectric:$robolectric_version",
          junit:              "junit:junit:$junit_version",
          mockito:            "com.nhaarman:mockito-kotlin:$mockito_version",
          kluent:             "org.amshove.kluent:kluent:$kluent_version",
  ]

  acceptanceTesting = [
          testRunner: 'androidx.test.ext:junit:1.1.1',
          testRules: 'androidx.test:rules:1.1.1',
          espressoCore: 'androidx.test.espresso:espresso-core:3.1.0',
          espressoIntents: 'androidx.test.espresso:espresso-intents:3.1.0',
          androidAnnotations: 'androidx.annotation:annotation:1.0.0',
  ]

  development = [
          leakCanary:         "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}",
          leakCanaryNoop:     "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}",
  ]
}

android {
  def config = rootProject.extensions.getByName("ext")

  compileSdkVersion config["compile_sdk"]
  buildToolsVersion '28.0.3'

  defaultConfig {
    applicationId config["application_id"]
    minSdkVersion config["min_sdk"]
    targetSdkVersion config["target_sdk"]
    versionCode config["version_code"]
    versionName config["version_name"]
    testInstrumentationRunner config["test_runner"]
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
    disable 'InvalidPackage'            //Some libraries have issues with this.
    disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
    disable 'IconDensities'             //For testing purpose. This is safe to remove.
    disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
  }

  signingConfigs {
    debug {
      storeFile file('../buildsystem/debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
      signingConfig signingConfigs.debug
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
    test.java.srcDirs += 'src/test/kotlin'
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
  }
}

dependencies {
  def applicationDependencies = mainApplication
  def unitTestDependencies = unitTesting
  def acceptanceTestDependencies = acceptanceTesting
  def developmentDependencies = development

  //Compile time dependencies
  kapt applicationDependencies.archComponentsCompiler
  kapt applicationDependencies.daggerCompiler
  compileOnly applicationDependencies.javaxAnnotation
  compileOnly applicationDependencies.javaxInject

  //Application dependencies
  ///implementation applicationDependencies.values()
  implementation applicationDependencies.kotlin
  implementation applicationDependencies.kotlinCoroutines
  implementation applicationDependencies.kotlinCoroutinesAndroid
  implementation applicationDependencies.appCompat
  implementation applicationDependencies.constraintLayout
  implementation applicationDependencies.archComponents
  implementation applicationDependencies.cardView
  implementation applicationDependencies.recyclerView
  implementation applicationDependencies.design
  implementation applicationDependencies.androidAnnotations
  implementation applicationDependencies.glide
  implementation applicationDependencies.dagger
  implementation applicationDependencies.retrofit
  implementation applicationDependencies.okhttpLoggingInterceptor
  implementation applicationDependencies.sdp
  implementation applicationDependencies.ssp
  implementation 'com.intuit.ssp:ssp-android:1.0.6'
  implementation 'com.intuit.sdp:sdp-android:1.0.6'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"
  ///implmentation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-alpha01'

  implementation applicationDependencies.roomRuntime
  kapt applicationDependencies.roomAnnotationProcessor


  //implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

  //Unit/Integration tests dependencies
  testImplementation unitTestDependencies.kotlin
  testImplementation unitTestDependencies.kotlinTest
  testImplementation unitTestDependencies.robolectric
  testImplementation unitTestDependencies.junit
  testImplementation unitTestDependencies.mockito
  testImplementation unitTestDependencies.kluent

  //Acceptance tests dependencies
  androidTestImplementation acceptanceTestDependencies.testRunner
  androidTestImplementation acceptanceTestDependencies.testRules
  androidTestImplementation acceptanceTestDependencies.espressoCore
  androidTestImplementation acceptanceTestDependencies.espressoIntents
  androidTestImplementation acceptanceTestDependencies.androidAnnotations

  //Development dependencies
  debugImplementation developmentDependencies.leakCanary
  releaseImplementation developmentDependencies.leakCanaryNoop
  testImplementation developmentDependencies.leakCanaryNoop


}

kotlin {
  /*experimental {
    coroutines "enable"
  }*/
}